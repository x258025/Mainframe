<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="Mainframe3270" type="LIBRARY" format="ROBOT" scope="SUITE" generated="2023-03-15T15:51:39+00:00" specversion="4" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\__init__.py" lineno="13">
<version>3.1</version>
<doc>Mainframe3270 is a library for Robot Framework based on the [https://pypi.org/project/py3270/|py3270 project],
a Python interface to x3270, an IBM 3270 terminal emulator. It provides an API to a x3270 or s3270 subprocess.

= Installation  =

For use this library you need to install the [http://x3270.bgp.nu/download.html|x3270 project]
and put the directory on your PATH. On Windows, you need to download wc3270 and put
the "C:\Program Files\wc3270" in PATH of the Environment Variables.

= Example =

| *** Settings ***
| Library           Mainframe3270
|
| *** Test Cases ***
| Example
|     Open Connection    Hostname    LUname
|     Change Wait Time    0.4 seconds
|     Change Wait Time After Write    0.4 seconds
|     Set Screenshot Folder    C:\\Temp\\IMG
|     ${value}    Read    3    10    17
|     Page Should Contain String    ENTER APPLICATION
|     Wait Field Detected
|     Write Bare    applicationname
|     Send Enter
|     Take Screenshot
|     Close Connection</doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="47">
<arguments repr="visible: bool = True, timeout: timedelta = 0:00:30, wait_time: timedelta = 0:00:00.500000, wait_time_after_write: timedelta = 0:00:00, img_folder: str = ., run_on_failure_keyword: str = Take Screenshot">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="visible: bool = True">
<name>visible</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta = 0:00:30">
<name>timeout</name>
<type typedoc="timedelta">timedelta</type>
<default>0:00:30</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="wait_time: timedelta = 0:00:00.500000">
<name>wait_time</name>
<type typedoc="timedelta">timedelta</type>
<default>0:00:00.500000</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="wait_time_after_write: timedelta = 0:00:00">
<name>wait_time_after_write</name>
<type typedoc="timedelta">timedelta</type>
<default>0:00:00</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="img_folder: str = .">
<name>img_folder</name>
<type typedoc="string">str</type>
<default>.</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="run_on_failure_keyword: str = Take Screenshot">
<name>run_on_failure_keyword</name>
<type typedoc="string">str</type>
<default>Take Screenshot</default>
</arg>
</arguments>
<doc>By default the emulator visibility is set to visible=True.
In this case test cases are executed using wc3270 (Windows) or x3270 (Linux/MacOSX).
You can change this by setting visible=False.
Then test cases are run using ws3720 (Windows) or s3270 (Linux/MacOS).
This is useful when test cases are run in a CI/CD-pipeline and there is no need for a graphical user interface.

Timeout, waits and screenshot folder are set on library import as shown above.
However, they can be changed during runtime. To modify the ``wait_time``, see `Change Wait Time`,
to modify the ``img_folder``, see `Set Screenshot Folder`,
and to modify the ``timeout``, see the `Change Timeout` keyword. Timeouts support all available
Robot Framework [https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format|time formats].

By default, Mainframe3270 will take a screenshot on failure.
You can overwrite this to run any other keyword by setting the ``run_on_failure_keyword`` option.
If you pass ``None`` to this argument, no keyword will be run.
To change the ``run_on_failure_keyword`` during runtime, see `Register Run On Failure Keyword`.</doc>
<shortdoc>By default the emulator visibility is set to visible=True. In this case test cases are executed using wc3270 (Windows) or x3270 (Linux/MacOSX). You can change this by setting visible=False. Then test cases are run using ws3720 (Windows) or s3270 (Linux/MacOS). This is useful when test cases are run in a CI/CD-pipeline and there is no need for a graphical user interface.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Change Timeout" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="43">
<arguments repr="seconds: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="seconds: timedelta">
<name>seconds</name>
<type typedoc="timedelta">timedelta</type>
</arg>
</arguments>
<doc>Change the timeout for connection in seconds.

Example:
    | Change Timeout | 3 seconds |</doc>
<shortdoc>Change the timeout for connection in seconds.</shortdoc>
</kw>
<kw name="Change Wait Time" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="142">
<arguments repr="wait_time: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="wait_time: timedelta">
<name>wait_time</name>
<type typedoc="timedelta">timedelta</type>
</arg>
</arguments>
<doc>To give time for the mainframe screen to be "drawn" and receive the next commands, a "wait time" has been
created, which by default is set to 0.5 seconds. This is a sleep applied AFTER the following keywords:

- `Execute Command`
- `Send Enter`
- `Send PF`
- `Write`
- `Write in position`

If you want to change this value, just use this keyword passing the time in seconds.

Example:
    | Change Wait Time | 0.5              |
    | Change Wait Time | 200 milliseconds |
    | Change Wait Time | 0:00:01.500      |</doc>
<shortdoc>To give time for the mainframe screen to be "drawn" and receive the next commands, a "wait time" has been created, which by default is set to 0.5 seconds. This is a sleep applied AFTER the following keywords:</shortdoc>
</kw>
<kw name="Change Wait Time After Write" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="162">
<arguments repr="wait_time_after_write: timedelta">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="wait_time_after_write: timedelta">
<name>wait_time_after_write</name>
<type typedoc="timedelta">timedelta</type>
</arg>
</arguments>
<doc>To give the user time to see what is happening inside the mainframe, a "wait time after write" has
been created, which by default is set to 0 seconds. This is a sleep applied AFTER sending a string in these
keywords:

- `Write`
- `Write Bare`
- `Write in position`
- `Write Bare in position`

If you want to change this value, just use this keyword passing the time in seconds.

Note: This keyword is useful for debug purpose

Example:
    | Change Wait Time After Write | 1             |
    | Change Wait Time After Write | 0.5 seconds   |
    | Change Wait Time After Write | 0:00:02       |</doc>
<shortdoc>To give the user time to see what is happening inside the mainframe, a "wait time after write" has been created, which by default is set to 0 seconds. This is a sleep applied AFTER sending a string in these keywords:</shortdoc>
</kw>
<kw name="Close Connection" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="133">
<arguments repr="">
</arguments>
<doc>Disconnect from the host.</doc>
<shortdoc>Disconnect from the host.</shortdoc>
</kw>
<kw name="Delete Char" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="297">
<arguments repr="ypos: int | None = None, xpos: int | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ypos: int | None = None">
<name>ypos</name>
<type typedoc="integer">int</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="xpos: int | None = None">
<name>xpos</name>
<type typedoc="integer">int</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Delete the character under the cursor. If you want to delete a character that is in
another position, simply pass the coordinates ``ypos`` / ``xpos``.

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Example:
    | Delete Char |
    | Delete Char | ypos=9 | xpos=25 |</doc>
<shortdoc>Delete the character under the cursor. If you want to delete a character that is in another position, simply pass the coordinates ``ypos`` / ``xpos``.</shortdoc>
</kw>
<kw name="Delete Field" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="315">
<arguments repr="ypos: int | None = None, xpos: int | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ypos: int | None = None">
<name>ypos</name>
<type typedoc="integer">int</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="xpos: int | None = None">
<name>xpos</name>
<type typedoc="integer">int</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Delete the entire content of a field at the current cursor location and positions
the cursor at beginning of field. If you want to delete a field that is in
another position, simply pass the coordinates ``ypos`` / ``xpos`` of any part in the field.

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Example:
    | Delete Field |
    | Delete Field | ypos=12 | xpos=6 |</doc>
<shortdoc>Delete the entire content of a field at the current cursor location and positions the cursor at beginning of field. If you want to delete a field that is in another position, simply pass the coordinates ``ypos`` / ``xpos`` of any part in the field.</shortdoc>
</kw>
<kw name="Execute Command" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="219">
<arguments repr="cmd: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="cmd: str">
<name>cmd</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Execute a [http://x3270.bgp.nu/wc3270-man.html#Actions|x3270 command].

Example:
    | Execute Command | Enter |
    | Execute Command | Home |
    | Execute Command | Tab |
    | Execute Command | PF(1) |</doc>
<shortdoc>Execute a [http://x3270.bgp.nu/wc3270-man.html#Actions|x3270 command].</shortdoc>
</kw>
<kw name="Move Next Field" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="340">
<arguments repr="">
</arguments>
<doc>Move the cursor to the next input field. Equivalent to pressing the Tab key.</doc>
<shortdoc>Move the cursor to the next input field. Equivalent to pressing the Tab key.</shortdoc>
</kw>
<kw name="Move Previous Field" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="345">
<arguments repr="">
</arguments>
<doc>Move the cursor to the previous input field. Equivalent to pressing the Shift+Tab keys.</doc>
<shortdoc>Move the cursor to the previous input field. Equivalent to pressing the Shift+Tab keys.</shortdoc>
</kw>
<kw name="Open Connection" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="53">
<arguments repr="host: str, LU: str | None = None, port: int = 23, extra_args: List[str] | PathLike | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="host: str">
<name>host</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="LU: str | None = None">
<name>LU</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="port: int = 23">
<name>port</name>
<type typedoc="integer">int</type>
<default>23</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="extra_args: List[str] | PathLike | None = None">
<name>extra_args</name>
<type typedoc="list">List[str]</type>
<type typedoc="Path">PathLike</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Create a connection to an IBM3270 mainframe with the default port 23.
To establish a connection, only the hostname is required. Optional parameters include logical unit name (LU) and port.

Additional configuration data can be provided through the `extra_args` parameter.
`extra_args` accepts either a list or a path to a file containing [https://x3270.miraheze.org/wiki/Category:Command-line_options|x3270 command line options].

Entries in the argfile can be on one line or multiple lines. Lines starting with "#" are considered comments.

| # example_argfile_oneline.txt
| -accepthostname myhost.com

| # example_argfile_multiline.txt
| -accepthostname myhost.com
| # this is a comment
| -charset french
| -port 992

Please ensure that the arguments provided are available for your specific x3270 application and version.
Refer to the [https://x3270.miraheze.org/wiki/Wc3270/Command-line_options|wc3270 command line options] for a subset of available options.

Note: If you specify the port with the `-port` command-line option in `extra_args` (or use the -xrm resource command for it),
it will take precedence over the `port` argument provided in the `Open Connection` keyword.

Example:
    | Open Connection | Hostname |
    | Open Connection | Hostname | LU=LUname |
    | Open Connection | Hostname | port=992 |
    | @{extra_args}   | Create List | -accepthostname | myhost.com | -cafile | ${CURDIR}/cafile.crt |
    | Append To List  | ${extra_args} | -port | 992 |
    | Open Connection | Hostname | extra_args=${extra_args} |
    | Open Connection | Hostname | extra_args=${CURDIR}/argfile.txt |</doc>
<shortdoc>Create a connection to an IBM3270 mainframe with the default port 23. To establish a connection, only the hostname is required. Optional parameters include logical unit name (LU) and port.</shortdoc>
</kw>
<kw name="Page Should Contain All Strings" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="558">
<arguments repr="list_string: List[str], ignore_case: bool = False, error_message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="list_string: List[str]">
<name>list_string</name>
<type typedoc="list">List[str]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message: str | None = None">
<name>error_message</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Assert that all of the strings in a given list exist on the mainframe screen.

The assertion is case sensitive. If you want it to be case insensitive, you can pass the argument ignore_case=True.

You can change the exception message by setting a custom string to error_message.

Example:
    | Page Should Contain All Strings | ${list_of_string} |
    | Page Should Contain All Strings | ${list_of_string} | ignore_case=True |
    | Page Should Contain All Strings | ${list_of_string} | error_message=New error message |</doc>
<shortdoc>Assert that all of the strings in a given list exist on the mainframe screen.</shortdoc>
</kw>
<kw name="Page Should Contain Any String" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="505">
<arguments repr="list_string: List[str], ignore_case: bool = False, error_message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="list_string: List[str]">
<name>list_string</name>
<type typedoc="list">List[str]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message: str | None = None">
<name>error_message</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Assert that one of the strings in a given list exists on the mainframe screen.

The assertion is case sensitive. If you want it to be case insensitive, you can pass the argument ignore_case=True.

You can change the exception message by setting a custom string to error_message.

Example:
    | Page Should Contain Any String | ${list_of_string} |
    | Page Should Contain Any String | ${list_of_string} | ignore_case=True |
    | Page Should Contain Any String | ${list_of_string} | error_message=New error message |</doc>
<shortdoc>Assert that one of the strings in a given list exists on the mainframe screen.</shortdoc>
</kw>
<kw name="Page Should Contain Match" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="669">
<arguments repr="txt: str, ignore_case: bool = False, error_message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt: str">
<name>txt</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message: str | None = None">
<name>error_message</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Assert that the text displayed on the mainframe screen matches the given pattern.

Pattern matching is similar to matching files in a shell, and it is always case sensitive.
In the pattern, * matches anything and ? matches any single character.

Note that for this keyword the entire screen is considered a string. So if you want to search
for the string "something" and it is somewhere other than at the beginning or end of the screen, it
should be reported as follows: **something**

The assertion is case sensitive. If you want it to be case insensitive, you can pass the argument ignore_case=True.

You can change the exception message by setting a custom string to error_message.

Example:
    | Page Should Contain Match | **something** |
    | Page Should Contain Match | **so???hing** |
    | Page Should Contain Match | **someTHING** | ignore_case=True |
    | Page Should Contain Match | **something** | error_message=New error message |</doc>
<shortdoc>Assert that the text displayed on the mainframe screen matches the given pattern.</shortdoc>
</kw>
<kw name="Page Should Contain String" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="456">
<arguments repr="txt: str, ignore_case: bool = False, error_message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt: str">
<name>txt</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message: str | None = None">
<name>error_message</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Assert that a given string exists on the mainframe screen.

The assertion is case sensitive. If you want it to be case insensitive, you can pass the argument ignore_case=True.

You can change the exception message by setting a custom string to error_message.

Example:
    | Page Should Contain String | something |
    | Page Should Contain String | someTHING | ignore_case=True                |
    | Page Should Contain String | something | error_message=New error message |</doc>
<shortdoc>Assert that a given string exists on the mainframe screen.</shortdoc>
</kw>
<kw name="Page Should Contain String X Times" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="609">
<arguments repr="txt: str, number: int, ignore_case: bool = False, error_message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt: str">
<name>txt</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="number: int">
<name>number</name>
<type typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message: str | None = None">
<name>error_message</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Asserts that the entered string appears the desired number of times on the mainframe screen.

The assertion is case sensitive. If you want it to be case insensitive, you can pass the argument ignore_case=True.

You can change the exception message by setting a custom string to error_message.

Example:
       | Page Should Contain String X Times | something | 3 |
       | Page Should Contain String X Times | someTHING | 3 | ignore_case=True |
       | Page Should Contain String X Times | something | 3 | error_message=New error message |</doc>
<shortdoc>Asserts that the entered string appears the desired number of times on the mainframe screen.</shortdoc>
</kw>
<kw name="Page Should Match Regex" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="641">
<arguments repr="regex_pattern: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="regex_pattern: str">
<name>regex_pattern</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Fails if string does not match pattern as a regular expression. Regular expression check is
implemented using the Python [https://docs.python.org/2/library/re.html|re module]. Python's
regular expression syntax is derived from Perl, and it is thus also very similar to the syntax used,
for example, in Java, Ruby and .NET.

Backslash is an escape character in the test data, and possible backslashes in the pattern must
thus be escaped with another backslash (e.g. \\d\\w+).</doc>
<shortdoc>Fails if string does not match pattern as a regular expression. Regular expression check is implemented using the Python [https://docs.python.org/2/library/re.html|re module]. Python's regular expression syntax is derived from Perl, and it is thus also very similar to the syntax used, for example, in Java, Ruby and .NET.</shortdoc>
</kw>
<kw name="Page Should Not Contain All Strings" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="580">
<arguments repr="list_string: List[str], ignore_case: bool = False, error_message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="list_string: List[str]">
<name>list_string</name>
<type typedoc="list">List[str]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message: str | None = None">
<name>error_message</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Fails if one of the strings in a given list exists on the mainframe screen. If one of the string
are found, the keyword will raise a exception.

The assertion is case sensitive. If you want it to be case insensitive, you can pass the argument ignore_case=True.

You can change the exception message by setting a custom string to error_message.

Example:
    | Page Should Not Contain All Strings | ${list_of_string} |
    | Page Should Not Contain All Strings | ${list_of_string} | ignore_case=True |
    | Page Should Not Contain All Strings | ${list_of_string} | error_message=New error message |</doc>
<shortdoc>Fails if one of the strings in a given list exists on the mainframe screen. If one of the string are found, the keyword will raise a exception.</shortdoc>
</kw>
<kw name="Page Should Not Contain Any String" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="535">
<arguments repr="list_string: List[str], ignore_case: bool = False, error_message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="list_string: List[str]">
<name>list_string</name>
<type typedoc="list">List[str]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message: str | None = None">
<name>error_message</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Assert that none of the strings in a given list exists on the mainframe screen. If one or more of the
string are found, the keyword will raise a exception.

The assertion is case sensitive. If you want it to be case insensitive, you can pass the argument ignore_case=True.

You can change the exception message by setting a custom string to error_message.

Example:
    | Page Should Not Contain Any Strings | ${list_of_string} |
    | Page Should Not Contain Any Strings | ${list_of_string} | ignore_case=True |
    | Page Should Not Contain Any Strings | ${list_of_string} | error_message=New error message |</doc>
<shortdoc>Assert that none of the strings in a given list exists on the mainframe screen. If one or more of the string are found, the keyword will raise a exception.</shortdoc>
</kw>
<kw name="Page Should Not Contain Match" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="704">
<arguments repr="txt: str, ignore_case: bool = False, error_message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt: str">
<name>txt</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message: str | None = None">
<name>error_message</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Assert that the text displayed on the mainframe screen does NOT match the given pattern.

Pattern matching is similar to matching files in a shell, and it is always case sensitive.
In the pattern, * matches anything and ? matches any single character.

Note that for this keyword the entire screen is considered a string. So if you want to search
for the string "something" and it is somewhere other than at the beginning or end of the screen, it
should be reported as follows: **something**

The assertion is case sensitive. If you want it to be case insensitive, you can pass the argument ignore_case=True.

You can change the exception message by setting a custom string to error_message.

Example:
    | Page Should Not Contain Match | **something** |
    | Page Should Not Contain Match | **so???hing** |
    | Page Should Not Contain Match | **someTHING** | ignore_case=True |
    | Page Should Not Contain Match | **something** | error_message=New error message |</doc>
<shortdoc>Assert that the text displayed on the mainframe screen does NOT match the given pattern.</shortdoc>
</kw>
<kw name="Page Should Not Contain String" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="481">
<arguments repr="txt: str, ignore_case: bool = False, error_message: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt: str">
<name>txt</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case: bool = False">
<name>ignore_case</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message: str | None = None">
<name>error_message</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Assert that a given string does NOT exists on the mainframe screen.

The assertion is case sensitive. If you want it to be case insensitive, you can pass the argument ignore_case=True.

You can change the exception message by setting a custom string to error_message.

Example:
    | Page Should Not Contain String | something |
    | Page Should Not Contain String | someTHING | ignore_case=True |
    | Page Should Not Contain String | something | error_message=New error message |</doc>
<shortdoc>Assert that a given string does NOT exists on the mainframe screen.</shortdoc>
</kw>
<kw name="Page Should Not Match Regex" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="655">
<arguments repr="regex_pattern: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="regex_pattern: str">
<name>regex_pattern</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Fails if string does match pattern as a regular expression. Regular expression check is
implemented using the Python [https://docs.python.org/2/library/re.html|re module]. Python's
regular expression syntax is derived from Perl, and it is thus also very similar to the syntax used,
for example, in Java, Ruby and .NET.

Backslash is an escape character in the test data, and possible backslashes in the pattern must
thus be escaped with another backslash (e.g. \\d\\w+).</doc>
<shortdoc>Fails if string does match pattern as a regular expression. Regular expression check is implemented using the Python [https://docs.python.org/2/library/re.html|re module]. Python's regular expression syntax is derived from Perl, and it is thus also very similar to the syntax used, for example, in Java, Ruby and .NET.</shortdoc>
</kw>
<kw name="Read" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="184">
<arguments repr="ypos: int, xpos: int, length: int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="ypos: int">
<name>ypos</name>
<type typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xpos: int">
<name>xpos</name>
<type typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="length: int">
<name>length</name>
<type typedoc="integer">int</type>
</arg>
</arguments>
<doc>Get a string of ``length`` at screen co-ordinates ``ypos`` / ``xpos``.

Co-ordinates are 1 based, as listed in the status area of the terminal.

Example for read a string in the position y=8 / x=10 of a length 15:
    | ${value} | Read | 8 | 10 | 15 |</doc>
<shortdoc>Get a string of ``length`` at screen co-ordinates ``ypos`` / ``xpos``.</shortdoc>
</kw>
<kw name="Read All Screen" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="202">
<arguments repr="">
</arguments>
<doc>Read the current screen and returns all content in one string.

This is useful if your automation scripts should take different routes depending
on a message shown on the screen.

Example:
    | ${screen} | Read All Screen              |
    | IF   | 'certain text' in '''${screen}''' |
    |      | Do Something                      |
    | ELSE |                                   |
    |      | Do Something Else                 |
    | END  |                                   |</doc>
<shortdoc>Read the current screen and returns all content in one string.</shortdoc>
</kw>
<kw name="Register Run On Failure Keyword" lineno="82">
<arguments repr="keyword: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="keyword: str">
<name>keyword</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>This keyword lets you change the keyword that runs on failure during test execution.
The default is `Take Screenshot`, which is set on library import.

You can set ``None`` to this keyword, if you do not want to run any keyword on failure.

Example:
    | Register Run On Failure Keyword | None | # no keyword is run on failure |
    | Register Run On Failure Keyword | Custom Keyword | # Custom Keyword is run on failure |</doc>
<shortdoc>This keyword lets you change the keyword that runs on failure during test execution. The default is `Take Screenshot`, which is set on library import.</shortdoc>
</kw>
<kw name="Send Enter" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="334">
<arguments repr="">
</arguments>
<doc>Send an Enter to the screen.</doc>
<shortdoc>Send an Enter to the screen.</shortdoc>
</kw>
<kw name="Send PF" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="350">
<arguments repr="PF: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="PF: str">
<name>PF</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Send a Program Function to the screen.

Example:
       | Send PF | 3 |</doc>
<shortdoc>Send a Program Function to the screen.</shortdoc>
</kw>
<kw name="Set Screenshot Folder" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="232">
<arguments repr="path: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path: str">
<name>path</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Set a folder to keep the html files generated by the `Take Screenshot` keyword.

Note that the folder needs to exist before running your automation scripts. Else the images
will be stored in the ``${OUTPUT DIR}`` set by robotframework.

Example:
    | Set Screenshot Folder | C:\\Temp\\Images |</doc>
<shortdoc>Set a folder to keep the html files generated by the `Take Screenshot` keyword.</shortdoc>
</kw>
<kw name="Take Screenshot" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="248">
<arguments repr="height: int = 410, width: int = 670, filename_prefix: str = screenshot">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="height: int = 410">
<name>height</name>
<type typedoc="integer">int</type>
<default>410</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="width: int = 670">
<name>width</name>
<type typedoc="integer">int</type>
<default>670</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="filename_prefix: str = screenshot">
<name>filename_prefix</name>
<type typedoc="string">str</type>
<default>screenshot</default>
</arg>
</arguments>
<doc>Generate a screenshot of the IBM 3270 Mainframe in a html format. The
default folder is the log folder of RobotFramework, if you want change see the `Set Screenshot Folder`.

The Screenshot is printed in a iframe log, with the values of height=410 and width=670, you
can change these values by passing them to the keyword.

The file name prefix can be set, the default is "screenshot".

The full file path is returned.

Example:
    | ${filepath} | Take Screenshot |
    | ${filepath} | Take Screenshot | height=500 | width=700 |
    | Take Screenshot | height=500 | width=700 |
    | Take Screenshot | filename_prefix=MyScreenshot |</doc>
<shortdoc>Generate a screenshot of the IBM 3270 Mainframe in a html format. The default folder is the log folder of RobotFramework, if you want change see the `Set Screenshot Folder`.</shortdoc>
</kw>
<kw name="Wait Field Detected" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="282">
<arguments repr="">
</arguments>
<doc>Wait until the screen is ready, the cursor has been positioned
on a modifiable field, and the keyboard is unlocked.

Sometimes the server will "unlock" the keyboard but the screen
will not yet be ready.  In that case, an attempt to read or write to the
screen will result in a 'E' keyboard status because we tried to read from
a screen that is not ready yet.

Using this method tells the client to wait until a field is
detected and the cursor has been positioned on it.</doc>
<shortdoc>Wait until the screen is ready, the cursor has been positioned on a modifiable field, and the keyboard is unlocked.</shortdoc>
</kw>
<kw name="Wait Until String" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="420">
<arguments repr="txt: str, timeout: timedelta = 0:00:05">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt: str">
<name>txt</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout: timedelta = 0:00:05">
<name>timeout</name>
<type typedoc="timedelta">timedelta</type>
<default>0:00:05</default>
</arg>
</arguments>
<doc>Wait until a string exists on the mainframe screen to perform the next step. If the string does not appear in
5 seconds, the keyword will raise an exception. You can define a different timeout.

Example:
    | Wait Until String | something |
    | Wait Until String | something | 10 |
    | Wait Until String | something | 15 s |
    | Wait Until String | something | 0:00:15 |</doc>
<shortdoc>Wait until a string exists on the mainframe screen to perform the next step. If the string does not appear in 5 seconds, the keyword will raise an exception. You can define a different timeout.</shortdoc>
</kw>
<kw name="Write" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="360">
<arguments repr="txt: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt: str">
<name>txt</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Send a string *and Enter* to the screen at the current cursor location.

Example:
    | Write | something |</doc>
<shortdoc>Send a string *and Enter* to the screen at the current cursor location.</shortdoc>
</kw>
<kw name="Write Bare" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="369">
<arguments repr="txt: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt: str">
<name>txt</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Send only the string to the screen at the current cursor location.

Example:
    | Write Bare | something |</doc>
<shortdoc>Send only the string to the screen at the current cursor location.</shortdoc>
</kw>
<kw name="Write Bare In Position" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="390">
<arguments repr="txt: str, ypos: int, xpos: int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt: str">
<name>txt</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="ypos: int">
<name>ypos</name>
<type typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xpos: int">
<name>xpos</name>
<type typedoc="integer">int</type>
</arg>
</arguments>
<doc>Send only the string to the screen at screen co-ordinates ``ypos`` / ``xpos``.

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Example:
    | Write Bare in Position | something | 9 | 11 |</doc>
<shortdoc>Send only the string to the screen at screen co-ordinates ``ypos`` / ``xpos``.</shortdoc>
</kw>
<kw name="Write In Position" source="C:\Robot\Robot-Framework-Mainframe-3270\Mainframe3270\x3270.py" lineno="378">
<arguments repr="txt: str, ypos: int, xpos: int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt: str">
<name>txt</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="ypos: int">
<name>ypos</name>
<type typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xpos: int">
<name>xpos</name>
<type typedoc="integer">int</type>
</arg>
</arguments>
<doc>Send a string *and Enter* to the screen at screen co-ordinates ``ypos`` / ``xpos``.

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Example:
    | Write in Position | something | 9 | 11 |</doc>
<shortdoc>Send a string *and Enter* to the screen at screen co-ordinates ``ypos`` / ``xpos``.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
<type name="boolean" type="Standard">
<doc>Strings ``TRUE``, ``YES``, ``ON`` and ``1`` are converted to Boolean ``True``,
the empty string as well as strings ``FALSE``, ``NO``, ``OFF`` and ``0``
are converted to Boolean ``False``, and the string ``NONE`` is converted
to the Python ``None`` object. Other strings and other accepted values are
passed as-is, allowing keywords to handle them specially if
needed. All string comparisons are case-insensitive.

Examples: ``TRUE`` (converted to ``True``), ``off`` (converted to ``False``),
``example`` (used as-is)
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
<type>None</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Page Should Contain All Strings</usage>
<usage>Page Should Contain Any String</usage>
<usage>Page Should Contain Match</usage>
<usage>Page Should Contain String</usage>
<usage>Page Should Contain String X Times</usage>
<usage>Page Should Not Contain All Strings</usage>
<usage>Page Should Not Contain Any String</usage>
<usage>Page Should Not Contain Match</usage>
<usage>Page Should Not Contain String</usage>
</usages>
</type>
<type name="integer" type="Standard">
<doc>Conversion is done using Python's [https://docs.python.org/library/functions.html#int|int]
built-in function. Floating point
numbers are accepted only if they can be represented as integers exactly.
For example, ``1.0`` is accepted and ``1.1`` is not.

Starting from RF 4.1, it is possible to use hexadecimal, octal and binary
numbers by prefixing values with ``0x``, ``0o`` and ``0b``, respectively.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``42``, ``-1``, ``0b1010``, ``10 000 000``, ``0xBAD_C0FFEE``
</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>Delete Char</usage>
<usage>Delete Field</usage>
<usage>Open Connection</usage>
<usage>Page Should Contain String X Times</usage>
<usage>Read</usage>
<usage>Take Screenshot</usage>
<usage>Write Bare In Position</usage>
<usage>Write In Position</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#list|list]
literals. They are converted to actual lists using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
lists and other containers.

If the type has nested types like ``list[int]``, items are converted
to those types automatically. This in new in Robot Framework 6.0.

Examples: ``['one', 'two']``, ``[('one', 1), ('two', 2)]``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Open Connection</usage>
<usage>Page Should Contain All Strings</usage>
<usage>Page Should Contain Any String</usage>
<usage>Page Should Not Contain All Strings</usage>
<usage>Page Should Not Contain Any String</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Delete Char</usage>
<usage>Delete Field</usage>
<usage>Open Connection</usage>
<usage>Page Should Contain All Strings</usage>
<usage>Page Should Contain Any String</usage>
<usage>Page Should Contain Match</usage>
<usage>Page Should Contain String</usage>
<usage>Page Should Contain String X Times</usage>
<usage>Page Should Not Contain All Strings</usage>
<usage>Page Should Not Contain Any String</usage>
<usage>Page Should Not Contain Match</usage>
<usage>Page Should Not Contain String</usage>
</usages>
</type>
<type name="Path" type="Standard">
<doc>Strings are converted [https://docs.python.org/library/pathlib.html|Path] objects.
On Windows ``/`` is converted to ``\`` automatically.

Examples: ``/tmp/absolute/path``, ``relative/path/to/file.ext``, ``name.txt``
</doc>
<accepts>
<type>string</type>
<type>PurePath</type>
</accepts>
<usages>
<usage>Open Connection</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Execute Command</usage>
<usage>Open Connection</usage>
<usage>Page Should Contain All Strings</usage>
<usage>Page Should Contain Any String</usage>
<usage>Page Should Contain Match</usage>
<usage>Page Should Contain String</usage>
<usage>Page Should Contain String X Times</usage>
<usage>Page Should Match Regex</usage>
<usage>Page Should Not Contain All Strings</usage>
<usage>Page Should Not Contain Any String</usage>
<usage>Page Should Not Contain Match</usage>
<usage>Page Should Not Contain String</usage>
<usage>Page Should Not Match Regex</usage>
<usage>Register Run On Failure Keyword</usage>
<usage>Send PF</usage>
<usage>Set Screenshot Folder</usage>
<usage>Take Screenshot</usage>
<usage>Wait Until String</usage>
<usage>Write</usage>
<usage>Write Bare</usage>
<usage>Write Bare In Position</usage>
<usage>Write In Position</usage>
</usages>
</type>
<type name="timedelta" type="Standard">
<doc>Strings are expected to represent a time interval in one of
the time formats Robot Framework supports:
- a number representing seconds like ``42`` or ``10.5``
- a time string like ``1 hour 2 seconds`` or ``1h 2s``
- a "timer" string like ``01:02`` (1 minute 2 seconds) or ``01:00:03`` (1 hour 3 seconds)

Integers and floats are considered to be seconds.

See the [https://robotframework.org/robotframework/|Robot Framework User Guide]
for more details about the supported time formats.
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Change Timeout</usage>
<usage>Change Wait Time</usage>
<usage>Change Wait Time After Write</usage>
<usage>Wait Until String</usage>
</usages>
</type>
</typedocs>
</keywordspec>
